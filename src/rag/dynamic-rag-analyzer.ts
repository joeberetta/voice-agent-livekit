import { ProductSearchOptions } from './product-rag.js';
import { Product } from './products.js';

export interface CategoryRelation {
  category: string;
  relatedCategories: string[];
  complementaryQueries: string[];
}

export interface SynonymGroup {
  baseWord: string;
  synonyms: string[];
  frequency: number;
}

export class DynamicRAGAnalyzer {
  private products: Product[];
  private synonymCache: Map<string, string[]> = new Map();
  private categoryRelations: Map<string, CategoryRelation> = new Map();
  private lastAnalysisTime: number = 0;
  private analysisInterval: number = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞

  constructor(products: Product[]) {
    this.products = products;
    this.analyzeProducts();
  }

  updateProducts(products: Product[]) {
    this.products = products;
    this.clearCache();
    this.analyzeProducts();
  }

  private clearCache() {
    this.synonymCache.clear();
    this.categoryRelations.clear();
  }

  private analyzeProducts() {
    const now = Date.now();
    if (now - this.lastAnalysisTime < this.analysisInterval) {
      return; // –ù–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ
    }

    console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Å–≤—è–∑–µ–π...');

    this.generateDynamicSynonyms();
    this.analyzeCategoryRelations();
    this.lastAnalysisTime = now;

    console.log(
      `‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: ${this.synonymCache.size} –≥—Ä—É–ø–ø —Å–∏–Ω–æ–Ω–∏–º–æ–≤, ${this.categoryRelations.size} –∫–∞—Ç–µ–≥–æ—Ä–∏–π–Ω—ã—Ö —Å–≤—è–∑–µ–π`,
    );
  }

  private generateDynamicSynonyms() {
    // –ë–∞–∑–æ–≤—ã–µ —Å–∏–Ω–æ–Ω–∏–º—ã (–≤—Å–µ–≥–¥–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã)
    const baseSynonyms: [string, string[]][] = [
      // –¶–≤–µ—Ç–∞
      ['—á–µ—Ä–Ω—ã–π', ['black', '—Ç–µ–º–Ω—ã–π']],
      ['–±–µ–ª—ã–π', ['white', '—Å–≤–µ—Ç–ª—ã–π']],
      ['–∫—Ä–∞—Å–Ω—ã–π', ['red', '–∞–ª—ã–π', '–±–æ—Ä–¥–æ–≤—ã–π']],
      ['—Å–∏–Ω–∏–π', ['blue', '–≥–æ–ª—É–±–æ–π', '—Ç–µ–º–Ω–æ-—Å–∏–Ω–∏–π']],
      ['–∑–µ–ª–µ–Ω—ã–π', ['green', '—Å–∞–ª–∞—Ç–æ–≤—ã–π', '–∏–∑—É–º—Ä—É–¥–Ω—ã–π']],
      ['–∂–µ–ª—Ç—ã–π', ['yellow', '–∑–æ–ª–æ—Ç–∏—Å—Ç—ã–π']],
      ['—Å–µ—Ä—ã–π', ['gray', 'grey', '—Å–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π']],
      ['–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π', ['brown', '–±–µ–∂–µ–≤—ã–π', '–∫–æ—Ñ–µ–π–Ω—ã–π']],

      // –ë–∞–∑–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
      ['–∫–æ–∂–∞', ['leather', '–∫–æ–∂–∞–Ω—ã–π']],
      ['—Ö–ª–æ–ø–æ–∫', ['cotton', '—Ö–ª–æ–ø–∫–æ–≤—ã–π']],
      ['—à–µ–ª–∫', ['silk', '—à–µ–ª–∫–æ–≤—ã–π']],
      ['—à–µ—Ä—Å—Ç—å', ['wool', '—à–µ—Ä—Å—Ç—è–Ω–æ–π']],
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Å–∏–Ω–æ–Ω–∏–º—ã
    baseSynonyms.forEach(([key, values]) => {
      this.synonymCache.set(key, values);
    });

    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã
    const wordFrequency = new Map<string, Set<string>>();
    const categoryWords = new Map<string, Set<string>>();

    this.products.forEach((product) => {
      const words = this.extractWords(product);

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–ª–æ–≤–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
      if (!categoryWords.has(product.category)) {
        categoryWords.set(product.category, new Set());
      }

      words.forEach((word) => {
        categoryWords.get(product.category)!.add(word);

        if (!wordFrequency.has(word)) {
          wordFrequency.set(word, new Set());
        }
        wordFrequency.get(word)!.add(product.id);
      });
    });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
    this.generateCategoryBasedSynonyms(categoryWords);
    this.generatePatternBasedSynonyms();
  }

  private extractWords(product: Product): string[] {
    const text = [
      product.name,
      product.description,
      product.subcategory,
      ...product.tags,
      ...product.colors,
    ]
      .join(' ')
      .toLowerCase();

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–∏–º—ã–µ —Å–ª–æ–≤–∞ (–¥–ª–∏–Ω–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤, –Ω–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞)
    const stopWords = new Set([
      '–¥–ª—è',
      '–∏–ª–∏',
      '—ç—Ç–æ',
      '–∫–∞–∫',
      '—Ç–∞–∫',
      '—á—Ç–æ',
      '–≥–¥–µ',
      '–∫–æ–≥–¥–∞',
      '—á–µ–º',
      '–≤—Å–µ',
      '–ø–æ–¥',
      '–Ω–∞–¥',
      '–ø—Ä–∏',
    ]);

    return text
      .split(/[^–∞-—è—ëa-z]+/i)
      .filter((word) => word.length > 2 && !stopWords.has(word))
      .map((word) => word.toLowerCase());
  }

  private generateCategoryBasedSynonyms(categoryWords: Map<string, Set<string>>) {
    const categoryMappings: Record<string, string[]> = {
      clothing: ['–æ–¥–µ–∂–¥–∞', '–ø–ª–∞—Ç—å–µ', '—Ä—É–±–∞—à–∫–∞', '–±—Ä—é–∫–∏', '–¥–∂–∏–Ω—Å—ã', '–∫—É—Ä—Ç–∫–∞', '—Å–≤–∏—Ç–µ—Ä', '—Ñ—É—Ç–±–æ–ª–∫–∞'],
      shoes: ['–æ–±—É–≤—å', '—Ç—É—Ñ–ª–∏', '–∫—Ä–æ—Å—Å–æ–≤–∫–∏', '–±–æ—Ç–∏–Ω–∫–∏', '—Å–∞–Ω–¥–∞–ª–∏–∏'],
      accessories: ['–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã', '—Å—É–º–∫–∞', '—á–∞—Å—ã', '—à–∞—Ä—Ñ', '–ø–ª–∞—Ç–æ–∫'],
      jewelry: ['—É–∫—Ä–∞—à–µ–Ω–∏—è', '–∫–æ–ª—å—Ü–æ', '—Å–µ—Ä—å–≥–∏', '—Ü–µ–ø–æ—á–∫–∞', '–±—Ä–∞—Å–ª–µ—Ç'],
      underwear: ['–±–µ–ª—å–µ', '—Ç—Ä—É—Å—ã', '–±—é—Å—Ç–≥–∞–ª—å—Ç–µ—Ä'],
    };

    Object.entries(categoryMappings).forEach(([category, baseWords]) => {
      const categoryWordSet = categoryWords.get(category);
      if (!categoryWordSet) return;

      baseWords.forEach((baseWord) => {
        const synonyms = Array.from(categoryWordSet).filter(
          (word) =>
            word.includes(baseWord) ||
            baseWord.includes(word) ||
            this.calculateSimilarity(word, baseWord) > 0.6,
        );

        if (synonyms.length > 0) {
          const existing = this.synonymCache.get(baseWord) || [];
          this.synonymCache.set(baseWord, [...existing, ...synonyms]);
        }
      });
    });
  }

  private generatePatternBasedSynonyms() {
    // –ù–∞—Ö–æ–¥–∏–º —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤–º–µ—Å—Ç–µ –≤ –æ–¥–Ω–∏—Ö —Ç–æ–≤–∞—Ä–∞—Ö
    const commonPairs = new Map<string, Map<string, number>>();

    this.products.forEach((product) => {
      const words = this.extractWords(product);

      for (let i = 0; i < words.length; i++) {
        for (let j = i + 1; j < words.length; j++) {
          const word1 = words[i];
          const word2 = words[j];

          if (!commonPairs.has(word1)) {
            commonPairs.set(word1, new Map());
          }

          const pairCount = commonPairs.get(word1)!.get(word2) || 0;
          commonPairs.get(word1)!.set(word2, pairCount + 1);
        }
      }
    });

    // –°–æ–∑–¥–∞–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã –¥–ª—è —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏—Ö—Å—è –ø–∞—Ä
    commonPairs.forEach((pairs, word1) => {
      pairs.forEach((count, word2) => {
        if (count >= 2 && this.areWordsSimilar(word1, word2)) {
          const existing1 = this.synonymCache.get(word1) || [];
          const existing2 = this.synonymCache.get(word2) || [];

          if (!existing1.includes(word2)) {
            this.synonymCache.set(word1, [...existing1, word2]);
          }
          if (!existing2.includes(word1)) {
            this.synonymCache.set(word2, [...existing2, word1]);
          }
        }
      });
    });
  }

  private areWordsSimilar(word1: string, word2: string): boolean {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ —Å–ª–æ–≤
    if (word1.length < 3 || word2.length < 3) return false;

    // –û–¥–∏–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –¥—Ä—É–≥–æ–≥–æ
    if (word1.includes(word2) || word2.includes(word1)) return true;

    // –ü–æ—Ö–æ–∂–∏–µ –∫–æ—Ä–Ω–∏
    const similarity = this.calculateSimilarity(word1, word2);
    return similarity > 0.7;
  }

  private calculateSimilarity(str1: string, str2: string): number {
    // –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞ –¥–ª—è —Å—Ö–æ–∂–µ—Å—Ç–∏ —Å—Ç—Ä–æ–∫
    const matrix = Array(str2.length + 1)
      .fill(null)
      .map(() => Array(str1.length + 1).fill(null));

    for (let i = 0; i <= str1.length; i++) matrix[0][i] = i;
    for (let j = 0; j <= str2.length; j++) matrix[j][0] = j;

    for (let j = 1; j <= str2.length; j++) {
      for (let i = 1; i <= str1.length; i++) {
        const indicator = str1[i - 1] === str2[j - 1] ? 0 : 1;
        matrix[j][i] = Math.min(
          matrix[j][i - 1] + 1,
          matrix[j - 1][i] + 1,
          matrix[j - 1][i - 1] + indicator,
        );
      }
    }

    const maxLen = Math.max(str1.length, str2.length);
    return maxLen === 0 ? 1 : (maxLen - matrix[str2.length][str1.length]) / maxLen;
  }

  private analyzeCategoryRelations() {
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–≥–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    const categoryTagMap = new Map<string, Map<string, number>>();
    const categoryGenderMap = new Map<string, Set<string>>();

    this.products.forEach((product) => {
      if (!categoryTagMap.has(product.category)) {
        categoryTagMap.set(product.category, new Map());
        categoryGenderMap.set(product.category, new Set());
      }

      const tagMap = categoryTagMap.get(product.category)!;
      const genderSet = categoryGenderMap.get(product.category)!;

      product.tags.forEach((tag) => {
        tagMap.set(tag, (tagMap.get(tag) || 0) + 1);
      });

      genderSet.add(product.gender);
    });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    const categories = Array.from(categoryTagMap.keys());

    categories.forEach((category) => {
      const relation: CategoryRelation = {
        category,
        relatedCategories: [],
        complementaryQueries: [],
      };

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –æ–±—â–∏–º —Ç–µ–≥–∞–º
      const categoryTags = categoryTagMap.get(category)!;
      const topTags = Array.from(categoryTags.entries())
        .sort(([, a], [, b]) => b - a)
        .slice(0, 5)
        .map(([tag]) => tag);

      categories.forEach((otherCategory) => {
        if (otherCategory === category) return;

        const otherTags = categoryTagMap.get(otherCategory)!;
        const commonTags = topTags.filter((tag) => otherTags.has(tag));

        if (commonTags.length > 0) {
          relation.relatedCategories.push(otherCategory);
        }
      });

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –¥–æ–ø–æ–ª–Ω—è—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
      relation.complementaryQueries = this.generateComplementaryQueries(
        category,
        topTags,
        relation.relatedCategories,
      );

      this.categoryRelations.set(category, relation);
    });
  }

  private generateComplementaryQueries(
    category: string,
    topTags: string[],
    relatedCategories: string[],
  ): string[] {
    const queries: string[] = [];

    // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    const complementaryRules: Record<string, string[]> = {
      clothing: ['accessories', 'shoes', 'jewelry'],
      shoes: ['clothing', 'accessories'],
      accessories: ['clothing', 'jewelry'],
      jewelry: ['clothing', 'accessories'],
      underwear: ['clothing'],
    };

    const baseComplements = complementaryRules[category] || [];

    // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    baseComplements.forEach((comp) => {
      if (relatedCategories.includes(comp)) {
        queries.push(this.getCategorySearchTerms(comp).join(' '));
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–≥–æ–≤
    const styleBasedQueries = topTags
      .filter((tag) => ['–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π', '—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π', '—ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π', '–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π'].includes(tag))
      .map((tag) => `${tag} ${baseComplements.join(' ')}`);

    queries.push(...styleBasedQueries.slice(0, 2));

    return queries.filter((q) => q.length > 0);
  }

  private getCategorySearchTerms(category: string): string[] {
    const terms: Record<string, string[]> = {
      clothing: ['–æ–¥–µ–∂–¥–∞', '–ø–ª–∞—Ç—å–µ', '—Ä—É–±–∞—à–∫–∞'],
      shoes: ['–æ–±—É–≤—å', '—Ç—É—Ñ–ª–∏', '–∫—Ä–æ—Å—Å–æ–≤–∫–∏'],
      accessories: ['–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã', '—Å—É–º–∫–∞'],
      jewelry: ['—É–∫—Ä–∞—à–µ–Ω–∏—è', '–∫–æ–ª—å—Ü–æ'],
      underwear: ['–±–µ–ª—å–µ'],
    };

    return terms[category] || [category];
  }

  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  getDynamicSynonyms(): Map<string, string[]> {
    this.analyzeProducts(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å
    return new Map(this.synonymCache);
  }

  getComplementaryQueries(
    product: Product,
  ): Array<{ query: string; options: ProductSearchOptions }> {
    this.analyzeProducts(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å

    const relation = this.categoryRelations.get(product.category);
    if (!relation) {
      return this.getFallbackComplementaryQueries(product);
    }

    const queries: Array<{ query: string; options: ProductSearchOptions }> = [];

    relation.complementaryQueries.forEach((query) => {
      queries.push({
        query,
        options: {
          gender: product.gender,
          inStock: true,
        },
      });
    });

    return queries.slice(0, 3); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
  }

  private getFallbackComplementaryQueries(
    product: Product,
  ): Array<{ query: string; options: ProductSearchOptions }> {
    // Fallback –ø—Ä–∞–≤–∏–ª–∞ –µ—Å–ª–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const fallbackRules: Record<string, string[]> = {
      clothing: ['—Å—É–º–∫–∞ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã', '—É–∫—Ä–∞—à–µ–Ω–∏—è'],
      shoes: ['–æ–¥–µ–∂–¥–∞', '—Å—É–º–∫–∞'],
      accessories: ['–æ–¥–µ–∂–¥–∞', '—É–∫—Ä–∞—à–µ–Ω–∏—è'],
      jewelry: ['–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã', '–æ–¥–µ–∂–¥–∞'],
      underwear: ['–æ–¥–µ–∂–¥–∞'],
    };

    const queries = fallbackRules[product.category] || ['–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã'];

    return queries.map((query) => ({
      query,
      options: {
        gender: product.gender,
        inStock: true,
      },
    }));
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
  getAnalysisStats() {
    return {
      totalProducts: this.products.length,
      synonymGroups: this.synonymCache.size,
      categoryRelations: this.categoryRelations.size,
      lastAnalysis: new Date(this.lastAnalysisTime).toLocaleString('ru-RU'),
    };
  }
}
